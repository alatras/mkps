def _ACCOUNT_NAME = env.ACCOUNT_NAME == "eos" || env.ACCOUNT_NAME == "test" ? "eos" : params.account_name
def _ENV_NAME = env.JOB_NAME.contains('dev') ? "dev" : env.JOB_NAME.contains('qa') ? "qa" : env.JOB_NAME.contains('uat') ? "uat" : env.ENV_NAME
def _BRANCH = _ENV_NAME == "dev" ? "main" : _ENV_NAME == "qa" ||  _ENV_NAME == "uat" ? "qa" : ""

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '5',
                daysToKeepStr: '60',
                numToKeepStr: '20')
        )
        disableConcurrentBuilds()
        disableResume()
        timeout(time: 1, unit: 'HOURS')
        ansiColor('xterm')
    }

    parameters {
        string(name: "account_name", defaultValue: "${env.ACCOUNT_NAME}", description: "Account name to use for deployment")
        string(name: "environment", defaultValue: "${_ENV_NAME}", description: "Environment name to use for deployment")
        string(name: "aws_region", defaultValue: "${env.REGION}", description: 'AWS Region to use for deployment')
        string(name: "branch", defaultValue: "${_BRANCH}", description: 'Add branch name or tag.')
    }

    stages {
        stage("Checkout codebase") {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '${branch}']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CleanCheckout']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'github-ci', url: 'git@github.com:AveNFT/marketplace-nest-be.git']]
                    ])
                }
            }
        }        
        stage('Create variables') {
            steps {
                script {
                    if (env.JOB_NAME.contains('nft')) {
                        _SERVICE = "NFT_SERVICE"
                    }    
                    else if (env.JOB_NAME.contains('avn')) {
                        _SERVICE = "AVN_SERVICE"
                    }    
                    else if (env.JOB_NAME.contains('listing')) {
                        _SERVICE = "LISTING_SERVICE"
                    }    
                    else if (env.JOB_NAME.contains('user')) {
                        _SERVICE = "USER_SERVICE"
                    }    
                    else if (env.JOB_NAME.contains('asset')) {
                        _SERVICE = "ASSET_SERVICE"
                    }    
                    
                    account_id = sh (script: "aws sts get-caller-identity --query 'Account' --output text", returnStdout: true).trim()
                    namespace = "app-${params.environment}"
                    helm_chart = "values-${params.account_name}-${params.environment}-${_SERVICE.toLowerCase()}.yaml"
                    tag = "v$BUILD_NUMBER"
                    latest = "latest"

                    if ("${params.account_name}" == "eos") {
                        tag = "v${params.environment}-$BUILD_NUMBER"
                        latest = "${params.environment}-latest"
                    } 
                    if ("${params.account_name}" == "prod") {
                        helm_chart = "values-${params.account_name}-${_SERVICE.toLowerCase()}.yaml"
                    }

                    if ("${params.account_name}" == "demo") {
                        namespace = "app-pentest"
                        helm_chart = "values-${params.account_name}-${_SERVICE.toLowerCase()}.yaml"
                    }
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    if ("${params.environment}" == "dev" || "${params.environment}" == "qa") {
                        properties([pipelineTriggers([pollSCM('H/10 * * * *')])])
                    }
                    else if ("${params.environment}" == "uat" && "${params.account_name}" != "test") {
                        properties([pipelineTriggers([pollSCM('H/10 * * * *')])])                    
                    }                    
                }
            }
        }
        stage('Build') {
            steps {
                sh "aws ecr get-login-password --region ${params.aws_region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com"
                sh "docker build  --no-cache -t ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/${_SERVICE.toLowerCase()}:${tag} --build-arg ACTIVE_SERVICES=${_SERVICE} ."
            }
        }

        stage('Publish') {
            steps {
                sh "docker push ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/${_SERVICE.toLowerCase()}:${tag}"
            }
        }

        stage('Clean') {
            steps {
                sh "docker image rm ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/${_SERVICE.toLowerCase()}:${tag}"
            }
        }

        stage('Deploy') {
            steps {
                dir('chart/services') {
                    sh "helm upgrade --install --set image.tag=${tag} ${_SERVICE.substring(0, _SERVICE.indexOf('_')).toLowerCase()} -f ${helm_chart} . -n ${namespace}"
                }
            }
        }
    }
}

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '5',
                daysToKeepStr: '60',
                numToKeepStr: '20')
        )
        disableConcurrentBuilds()
        disableResume()
        timeout(time: 1, unit: 'HOURS')
        ansiColor('xterm')
    }

    stages {
        stage('Create variables') {
            steps {
                script {
                    account_id = sh (script: "aws sts get-caller-identity --query 'Account' --output text", returnStdout: true).trim()
                    account_id_base = "696165561482"
                    aws_region_base = "us-east-2"
                    
                    tenant_secret_id = "arn:aws:secretsmanager:${params.aws_region}:$account_id:secret:/${params.environment}/service/tenant"
                    package_name = sh (script: "aws secretsmanager get-secret-value --region ${params.aws_region} --secret-id $tenant_secret_id | jq -r .SecretString | jq -r .package", returnStdout: true).trim()                    

                    namespace = "app-${params.environment}"
                    helm_chart = "values-${params.account_name}-${params.environment}.yaml"                    
                    tag = "$BUILD_NUMBER"
                    latest = "latest"

                    if ("${params.account_name}" == "prod") {
                        helm_chart = "values-prod.yaml"                        
                    } 
                    else if ("${params.account_name}" == "test") {
                        tag = "${params.environment}-$BUILD_NUMBER"
                        latest = "${params.environment}-latest"
                        helm_chart = "values.yaml" 
                        
                        if ("${params.environment}" == "uat") {
                            helm_chart = "values-uat.yaml"
                        }                          
                    } 
                    else if ("${params.account_name}" == "demo") {
                        namespace = "app-pentest"
                        helm_chart = "values-demo.yaml"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh "aws ecr get-login-password --region ${params.aws_region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com"
                sh "aws ecr get-login-password --region ${aws_region_base} | docker login --username AWS --password-stdin ${account_id_base}.dkr.ecr.${aws_region_base}.amazonaws.com"

                sh "docker build -t ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${tag}  --build-arg PACKAGE=${package_name} --build-arg ENVIRONMENT=${params.environment} -t ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${latest} --build-arg PACKAGE=${package_name} --build-arg ENVIRONMENT=${params.environment} ."
            }
        }

        stage('Publish') {
            steps {
                sh "docker push ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${tag}"
                sh "docker push ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${latest}"
            }
        }

        stage('Clean') {
            steps {
                sh "docker image rm ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${tag}"
                sh "docker image rm ${account_id}.dkr.ecr.${params.aws_region}.amazonaws.com/be-v2:${latest}"
            }
        }

        stage('Deploy') {
            steps {
                dir('chart/nft-be-v2') {
                    sh "helm upgrade --install --set image.tag=${tag} nft-be-v2 -f ${helm_chart} . -n ${namespace}"
                }
            }
        }
    }
}
